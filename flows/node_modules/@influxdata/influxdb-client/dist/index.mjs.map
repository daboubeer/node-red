{"version":3,"file":"index.mjs","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/results/stringToLines.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/node/nodeChunkCombiner.ts","../src/impl/version.ts","../src/impl/node/NodeHttpTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/QueryApiImpl.ts","../src/results/ObservableQuery.ts","../src/results/AnnotatedCSVResponseImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare const TextDecoder: any\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e as Error)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n}\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {FluxTableColumn, ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any}\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  writeSuccess: function() {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function(value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts of Point's timestamp to a string\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  if (typeof value === 'number') {\n    if (!isFinite(value)) {\n      throw new Error(`not a flux float: ${value}`)\n    }\n    return value.toString()\n  }\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n      continue\n    }\n    if (c !== '.' && c !== '-' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = sanitizeFloat(value)\n  for (const c of val) {\n    if (c === '.') {\n      throw new Error(`not a flux integer: ${val}`)\n    }\n  }\n  return new FluxParameter(val)\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Log} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  expires: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      delay = expires - Date.now()\n      retryTime = expires\n    }\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first.next = undefined\n        this.first = newFirst\n        if (!this.first) {\n          this.last = undefined\n        }\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      expires,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, Math.max(delay, 0))\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    attempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.httpPath,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","import {Buffer} from 'buffer'\nimport {ChunkCombiner} from '../../results'\n\nconst nodeChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    return Buffer.concat([first, second])\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    return (chunk as Buffer).toString('utf-8', start, end)\n  },\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = Buffer.allocUnsafe(end - start)\n    ;(chunk as Buffer).copy(retVal, 0, start, end)\n    return retVal\n  },\n}\n\nexport default nodeChunkCombiner\n","export const CLIENT_LIB_VERSION = '1.21.0'\n","import {ConnectionOptions, DEFAULT_ConnectionOptions} from '../../options'\nimport {parse} from 'url'\nimport * as http from 'http'\nimport * as https from 'https'\nimport {Buffer} from 'buffer'\nimport {RequestTimedOutError, AbortError, HttpError} from '../../errors'\nimport {Transport, SendOptions} from '../../transport'\nimport {\n  Cancellable,\n  ChunkCombiner,\n  CommunicationObserver,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\nimport nodeChunkCombiner from './nodeChunkCombiner'\nimport zlib from 'zlib'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {CLIENT_LIB_VERSION} from '../version'\nimport {Log} from '../../util/logger'\n\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH,\n}\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nclass CancellableImpl implements Cancellable {\n  private cancelled = false\n  cancel(): void {\n    this.cancelled = true\n  }\n  isCancelled(): boolean {\n    return this.cancelled\n  }\n}\n\n/**\n * Transport layer on top of node http or https library.\n */\nexport class NodeHttpTransport implements Transport {\n  /* required transport member */\n  readonly chunkCombiner: ChunkCombiner = nodeChunkCombiner\n\n  private defaultOptions: {[key: string]: any}\n  private requestApi: (\n    options: http.RequestOptions,\n    callback: (res: http.IncomingMessage) => void\n  ) => http.ClientRequest\n  private contextPath: string\n  /**\n   * Creates a node transport using for the client options supplied.\n   * @param connectionOptions - connection options\n   */\n  constructor(private connectionOptions: ConnectionOptions) {\n    const url = parse(connectionOptions.url)\n    this.defaultOptions = {\n      ...DEFAULT_ConnectionOptions,\n      ...connectionOptions,\n      ...connectionOptions.transportOptions,\n      port: url.port,\n      protocol: url.protocol,\n      hostname: url.hostname,\n    }\n    this.contextPath = url.path ?? ''\n    if (this.contextPath.endsWith('/')) {\n      this.contextPath = this.contextPath.substring(\n        0,\n        this.contextPath.length - 1\n      )\n    }\n    // remove all undefined field to avoid node validation errors\n    // https://github.com/influxdata/influxdb-client-js/issues/380\n    Object.keys(this.defaultOptions).forEach(\n      key =>\n        this.defaultOptions[key] === undefined &&\n        delete this.defaultOptions[key]\n    )\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.contextPath == '/api/v2') {\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${url.protocol}//${url.hostname}:${url.port} !`\n      )\n      this.contextPath = ''\n    }\n\n    if (url.protocol === 'http:') {\n      this.requestApi =\n        this.defaultOptions['follow-redirects']?.http?.request ?? http.request\n    } else if (url.protocol === 'https:') {\n      this.requestApi =\n        this.defaultOptions['follow-redirects']?.https?.request ?? https.request\n    } else {\n      throw new Error(\n        `Unsupported protocol \"${url.protocol} in URL: \"${connectionOptions.url}\"`\n      )\n    }\n  }\n\n  /**\n   * Sends data to server and receives communication events via communication callbacks.\n   *\n   * @param path - HTTP request  path\n   * @param body - message body\n   * @param headers - HTTP headers\n   * @param method - HTTP method\n   * @param callbacks - communication callbacks\n   */\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const cancellable = new CancellableImpl()\n    if (callbacks && callbacks.useCancellable)\n      callbacks.useCancellable(cancellable)\n    this.createRequestMessage(path, body, options).then(\n      (message: {[key: string]: any}) => {\n        this._request(message, cancellable, callbacks)\n      },\n      /* istanbul ignore next - hard to simulate failure, manually reviewed */\n      (err: Error) => callbacks?.error && callbacks.error(err)\n    )\n  }\n\n  /**\n   * Sends data to the server and receives decoded result. The type of the result depends on\n   * response's content-type (deserialized json, text).\n  \n   * @param path - HTTP path\n   * @param requestBody - request body\n   * @param options - send options\n   * @returns Promise of response body\n   */\n  request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    if (!body) {\n      body = ''\n    } else if (typeof body !== 'string') {\n      body = JSON.stringify(body)\n    }\n    let buffer = emptyBuffer\n    let contentType: string\n    let responseStatusCode: number | undefined\n    return new Promise((resolve, reject) => {\n      this.send(path, body as string, options, {\n        responseStarted(headers: Headers, statusCode?: number) {\n          if (responseStarted) {\n            responseStarted(headers, statusCode)\n          }\n          contentType = String(headers['content-type'])\n          responseStatusCode = statusCode\n        },\n        next: (data: Uint8Array): void => {\n          buffer = Buffer.concat([buffer, data])\n        },\n        complete: (): void => {\n          const responseType = options.headers?.accept ?? contentType\n          try {\n            if (responseStatusCode === 204) {\n              // ignore body of NO_CONTENT response\n              resolve(undefined)\n            }\n            if (responseType.includes('json')) {\n              if (buffer.length) {\n                resolve(JSON.parse(buffer.toString('utf8')))\n              } else {\n                resolve(undefined)\n              }\n            } else if (\n              responseType.includes('text') ||\n              responseType.startsWith('application/csv')\n            ) {\n              resolve(buffer.toString('utf8'))\n            } else {\n              resolve(buffer)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        },\n        error: (e: Error): void => {\n          reject(e)\n        },\n      })\n    })\n  }\n\n  /**\n   * Creates configuration for a specific request.\n   *\n   * @param path - API path starting with '/' and containing also query parameters\n   * @param headers - HTTP headers to use\n   * @param method - HTTP method\n   * @param body - request body, will be utf-8 encoded\n   * @returns a configuration object that is suitable for making the request\n   */\n  private createRequestMessage(\n    path: string,\n    body: string,\n    sendOptions: SendOptions\n  ): Promise<{[key: string]: any}> {\n    const bodyBuffer = Buffer.from(body, 'utf-8')\n    const headers: {[key: string]: any} = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      headers.authorization = 'Token ' + this.connectionOptions.token\n    }\n    let bodyPromise = Promise.resolve(bodyBuffer)\n    const options: {[key: string]: any} = {\n      ...this.defaultOptions,\n      path: this.contextPath + path,\n      method: sendOptions.method,\n      headers: {\n        ...headers,\n        ...sendOptions.headers,\n      },\n    }\n    if (\n      sendOptions.gzipThreshold !== undefined &&\n      sendOptions.gzipThreshold < bodyBuffer.length\n    ) {\n      bodyPromise = bodyPromise.then(body => {\n        return new Promise((resolve, reject) => {\n          zlib.gzip(body, (err, res) => {\n            /* istanbul ignore next - hard to simulate failure, manually reviewed */\n            if (err) {\n              return reject(err)\n            }\n            options.headers['content-encoding'] = 'gzip'\n            return resolve(res)\n          })\n        })\n      })\n    }\n\n    return bodyPromise.then(bodyBuffer => {\n      options.body = bodyBuffer\n      options.headers['content-length'] = bodyBuffer.length\n      return options\n    })\n  }\n\n  private _request(\n    requestMessage: {[key: string]: any},\n    cancellable: CancellableImpl,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const listeners = completeCommunicationObserver(callbacks)\n    if (cancellable.isCancelled()) {\n      listeners.complete()\n      return\n    }\n    const req = this.requestApi(requestMessage, (res: http.IncomingMessage) => {\n      /* istanbul ignore next - hard to simulate failure, manually reviewed */\n      if (cancellable.isCancelled()) {\n        res.resume()\n        listeners.complete()\n        return\n      }\n      res.on('aborted', () => {\n        listeners.error(new AbortError())\n      })\n      res.on('error', listeners.error)\n      listeners.responseStarted(res.headers, res.statusCode)\n      /* istanbul ignore next statusCode is optional in http.IncomingMessage */\n      const statusCode = res.statusCode ?? 600\n      const contentEncoding = res.headers['content-encoding']\n      let responseData\n      if (contentEncoding === 'gzip') {\n        responseData = zlib.createGunzip(zlibOptions)\n        responseData.on('error', listeners.error)\n        res.pipe(responseData)\n      } else {\n        responseData = res\n      }\n      if (statusCode >= 300) {\n        let body = ''\n        const isJson = String(res.headers['content-type']).startsWith(\n          'application/json'\n        )\n        responseData.on('data', s => {\n          body += s.toString()\n          if (!isJson && body.length > 1000) {\n            body = body.slice(0, 1000)\n            res.resume()\n          }\n        })\n        responseData.on('end', () => {\n          if (body === '' && !!res.headers['x-influxdb-error']) {\n            body = res.headers['x-influxdb-error'].toString()\n          }\n          listeners.error(\n            new HttpError(\n              statusCode,\n              res.statusMessage,\n              body,\n              res.headers['retry-after'],\n              res.headers['content-type']\n            )\n          )\n        })\n      } else {\n        responseData.on('data', data => {\n          if (cancellable.isCancelled()) {\n            res.resume()\n          } else {\n            listeners.next(data)\n          }\n        })\n        responseData.on('end', listeners.complete)\n      }\n    })\n    // Support older Nodes which don't allow `timeout` in the\n    // request options\n    /* istanbul ignore else support older node versions */\n    if (typeof req.setTimeout === 'function' && requestMessage.timeout) {\n      req.setTimeout(requestMessage.timeout)\n    }\n\n    req.on('timeout', () => {\n      listeners.error(new RequestTimedOutError())\n    })\n    req.on('error', error => {\n      listeners.error(error)\n    })\n    req.on('close', listeners.complete)\n\n    /* istanbul ignore else support older node versions */\n    if (requestMessage.body) {\n      req.write(requestMessage.body)\n    }\n    req.end()\n  }\n}\nexport default NodeHttpTransport\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    return this.createCSVResponse(this.createExecutor(query))\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): APIExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        consumer\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n","import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n} from '../results'\nimport {Observable} from '../observable'\nimport {AnnotatedCSVResponse} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, observer =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, observer => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {AnnotatedCSVResponse, APIExecutor} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    this.processCSVResponse = (executor: APIExecutor): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(executor, this.transport.chunkCombiner)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n"],"names":["createTextDecoderCombiner","decoder","TextDecoder","[object Object]","first","second","retVal","Uint8Array","length","set","chunk","start","end","subarray","toUtf8String","decode","chunksToLines","target","chunkCombiner","chunks","previous","finished","quoted","index","concat","c","next","copy","undefined","bufferReceived","e","this","error","complete","cancellable","useCancellable","self","cancel","isCancelled","LineSplitter","reuse","_reuse","val","reusedValues","Array","line","lastSplitLength","quoteCount","startIndex","values","count","i","getValue","push","substring","replace","FluxTableColumnImpl","newFluxTableColumn","createFluxTableColumn","object","label","String","dataType","group","Boolean","defaultValue","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","message","super","name","Object","setPrototypeOf","prototype","HttpError","statusMessage","body","retryAfter","contentType","startsWith","json","JSON","parse","code","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","canRetryHttpCall","canRetry","getRetryDelay","retryJitter","Math","round","random","RequestTimedOutError","AbortError","identity","x","typeSerializers","boolean","unsignedLong","long","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","string","base64Binary","duration","dateTime:RFC3339","serializeDateTimeAsDate","Date","serializeDateTimeAsNumber","serializeDateTimeAsString","FluxTableMetaDataImpl","columns","forEach","col","acc","column","createFluxTableMetaData","linesToTables","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","size","slice","stringToLines","source","charCodeAt","DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","minRetryDelay","maxRetryDelay","exponentialBase","randomRetry","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","writeSuccess","maxRetries","maxRetryTime","maxBufferLines","gzipThreshold","createEscaper","characters","replacements","value","from","found","indexOf","escape","measurement","escaper","createQuotedEscaper","tag","useHrTime","useProcessHrtime","use","process","hrtime","startHrMillis","startHrTime","lastMillis","now","stepsInMillis","nanos","hrTime","millis","floor","substr","micros","trunc","seconds","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","convertTimeToNanos","consoleLogger","console","warn","provider","Log","setLogger","logger","FLUX_VALUE","Symbol","FluxParameter","fluxValue","sanitizeString","toString","prepareRetVal","charAt","fluxString","sanitizeFloat","isFinite","dot","fluxFloat","fluxInteger","fluxDateTime","sanitizeDateTime","fluxDuration","sanitizeRegExp","fluxRegExp","fluxBool","fluxExpression","toFluxValue","toISOString","RegExp","isArray","map","join","flux","strings","parts","partIndex","text","sanitized","endsWith","symbolObservable","observable","Point","measurementName","tags","fields","isNaN","MAX_SAFE_INTEGER","strVal","localeCompare","parseFloat","time","settings","fieldsLine","keys","sort","tagsLine","defaultTags","convertTime","toLineProtocol","stringify","RetryStrategyImpl","options","success","failedAttempts","delay","max","nextDelay","currentDelay","min","RetryBuffer","maxLines","retryLines","lines","retryCount","expires","closed","retryTime","nextRetryTime","origSize","newSize","newFirst","last","toAdd","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","httpPath","encodeURIComponent","useDefaultTags","sendOptions","method","headers","content-type","writeBuffer","_clearFlushTimeout","sendBatch","bind","retryStrategy","retryBuffer","attempts","reject","responseStatusCode","callbacks","_headers","onRetry","call","addLines","send","add","records","point","points","withRetryBuffer","finally","remaining","close","nodeChunkCombiner","Buffer","allocUnsafe","zlibOptions","zlib","constants","Z_SYNC_FLUSH","finishFlush","emptyBuffer","CancellableImpl","cancelled","NodeHttpTransport","connectionOptions","url","defaultOptions","transportOptions","port","protocol","hostname","contextPath","path","key","requestApi","http","request","http.request","https","https.request","createRequestMessage","_request","err","responseStarted","buffer","data","responseType","accept","bodyBuffer","User-Agent","token","authorization","bodyPromise","gzip","res","requestMessage","listeners","state","completeCommunicationObserver","req","resume","on","responseData","createGunzip","pipe","isJson","write","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","createCSVResponse","query","createExecutor","response","rows","consumeLines","consumeRows","rowMapper","collectRows","collectLines","type","decorateRequest","dialect","accept-encoding","QuerySubscription","observer","executor","isClosed","noop","ObservableQuery","decorator","observerOrNext","completeObserver","defaultRowMapping","tableMeta","toObject","AnnotatedCSVResponseImpl","InfluxDB","_options","TransportImpl","processCSVResponse"],"mappings":"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"}
{"version":3,"file":"influxdb.js","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/results/stringToLines.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/browser/FetchTransport.ts","../src/impl/QueryApiImpl.ts","../src/results/ObservableQuery.ts","../src/results/AnnotatedCSVResponseImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare const TextDecoder: any\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e as Error)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n}\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {FluxTableColumn, ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any}\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  writeSuccess: function() {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function(value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts of Point's timestamp to a string\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  if (typeof value === 'number') {\n    if (!isFinite(value)) {\n      throw new Error(`not a flux float: ${value}`)\n    }\n    return value.toString()\n  }\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n      continue\n    }\n    if (c !== '.' && c !== '-' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = sanitizeFloat(value)\n  for (const c of val) {\n    if (c === '.') {\n      throw new Error(`not a flux integer: ${val}`)\n    }\n  }\n  return new FluxParameter(val)\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Log} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  expires: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      delay = expires - Date.now()\n      retryTime = expires\n    }\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first.next = undefined\n        this.first = newFirst\n        if (!this.first) {\n          this.last = undefined\n        }\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      expires,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, Math.max(delay, 0))\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    attempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.httpPath,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Log} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Log.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamDefaultReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function() {}\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    return this.createCSVResponse(this.createExecutor(query))\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): APIExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        consumer\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n","import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n} from '../results'\nimport {Observable} from '../observable'\nimport {AnnotatedCSVResponse} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, observer =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, observer => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {AnnotatedCSVResponse, APIExecutor} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    this.processCSVResponse = (executor: APIExecutor): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(executor, this.transport.chunkCombiner)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n"],"names":["TransportImpl"],"mappings":"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"}